name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      release_notes:
        description: 'Release notes'
        required: false
        default: 'Automated release build'

jobs:
  trigger-docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Docker CI workflow
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'docker-image.yml'
            });
            console.log('Docker CI workflow triggered successfully');

  build-macos-apple-silicon:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable
        run: |
          pyinstaller --onefile --name thsr-sniper-macos-apple-silicon \
            --add-data "thsr_ocr:thsr_ocr" \
            --hidden-import=tensorflow \
            --hidden-import=keras \
            main.py

      - name: Upload macOS Apple Silicon artifact
        uses: actions/upload-artifact@v4
        with:
          name: thsr-sniper-macos-apple-silicon
          path: dist/thsr-sniper-macos-apple-silicon

  build-macos-intel:
    runs-on: macos-13
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable
        run: |
          pyinstaller --onefile --name thsr-sniper-macos-intel \
            --add-data "thsr_ocr:thsr_ocr" \
            --hidden-import=tensorflow \
            --hidden-import=keras \
            main.py

      - name: Upload macOS Intel artifact
        uses: actions/upload-artifact@v4
        with:
          name: thsr-sniper-macos-intel
          path: dist/thsr-sniper-macos-intel

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable
        run: |
          pyinstaller --onefile --name thsr-sniper-windows.exe ^
            --add-data "thsr_ocr;thsr_ocr" ^
            --hidden-import=tensorflow ^
            --hidden-import=keras ^
            main.py

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: thsr-sniper-windows
          path: dist/thsr-sniper-windows.exe

  create-release:
    needs: [trigger-docker-build, build-macos-apple-silicon, build-macos-intel, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          body: |
            ${{ github.event.inputs.release_notes }}
            
            ## Platform Downloads & Usage
            
            ### üêß Linux / Ubuntu
            **Use Docker** (Recommended)
            ```bash
            # Pull and run the latest Docker image
            docker run -it --rm ${{ secrets.DOCKERHUB_USERNAME }}/thsr-sniper:latest
            
            # Or with custom arguments
            docker run -it --rm ${{ secrets.DOCKERHUB_USERNAME }}/thsr-sniper:latest python main.py --help
            ```
            
            ### üçé macOS (Apple Silicon / M1/M2/M3)
            **Native executable**
            ```bash
            # Download and run
            chmod +x thsr-sniper-macos-apple-silicon
            ./thsr-sniper-macos-apple-silicon --help
            ```
            
            ### üçé macOS (Intel)
            **Native executable**
            ```bash
            # Download and run
            chmod +x thsr-sniper-macos-intel
            ./thsr-sniper-macos-intel --help
            ```
            
            ### ü™ü Windows
            **Native executable**
            ```cmd
            # Download and run
            thsr-sniper-windows.exe --help
            ```
            
            ## Build Information
            - Version: ${{ github.event.inputs.version }}
            - Build date: ${{ github.run_started_at }}
            - Docker image: Available on Docker Hub
          files: |
            artifacts/thsr-sniper-macos-apple-silicon/thsr-sniper-macos-apple-silicon
            artifacts/thsr-sniper-macos-intel/thsr-sniper-macos-intel
            artifacts/thsr-sniper-windows/thsr-sniper-windows.exe
